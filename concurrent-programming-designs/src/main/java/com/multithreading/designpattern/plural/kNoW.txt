====
    The MIT License
    Copyright (c) 2018 Anshul Mohil

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
====

Advantage of using CompletableFuture API over executor API

if you want the result out of Future which will be returned by Exceutor you need to call join() or get() which actually blocks current thread
until Future object received object.

If you wish to use the Future object when available without blocking current execution then consider using chaing offered by
CompletableFuture

Lets say you want to send request to db get get results and log the results and do not wish to block for logging
until recived results from DB you can chain
CompletableFuture.thenApplyAsync(userID_from_db, executors).thenAcceptAsync(Consumer);

Now Consumer can be implemented for logging retured users. Consumer will run on any aviablale thread on
passed executor.